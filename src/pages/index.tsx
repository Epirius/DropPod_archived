import type { Podcast } from "@prisma/client";
import type { GetServerSideProps } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import PodcastCard from "~/components/PodcastCard";
import { prisma } from "~/server/db";
import {api} from "~/utils/api";

export default function Home(){
  // const hello = api.example.hello.useQuery({ text: "from tRPC" });

  const { data: sessionData } = useSession();
  const podcasts = api.podcast.getPodcast.useQuery({category: "history", languageCode: "en", limit: 10});
  console.log(sessionData);
  return (
    <>
      <Head>
        <title>DropPod</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="shortcut icon" href="/images/favicon.ico" />
        <link
          rel="apple-touch-icon"
          sizes="180x180"
          href="/images/apple-touch-icon.png"
        />
        <link
          rel="icon"
          type="image/png"
          sizes="32x32"
          href="/images/favicon-32x32.png"
        />
        <link
          rel="icon"
          type="image/png"
          sizes="16x16"
          href="/images/favicon-16x16.png"
        />
      </Head>
      <main className=" overflow-auto ">
        {sessionData && (
          <div className="grid grid-cols-4  gap-4 overflow-x-hidden">
            {podcasts.data &&
              podcasts.data.map((p) => (
                <PodcastCard key={p.guid + "_card"} data={p} />
              ))}
          </div>
        )}
        {!sessionData && <p>NOT SIGNED IN</p>}
      </main>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  /*const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );*/

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}
